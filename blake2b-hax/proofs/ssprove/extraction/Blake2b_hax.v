(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
From Jasmin Require Import word.

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

Definition t_Blake2bCtx : choice_type :=
  (nseq int8 128 × nseq int64 8 × nseq int64 2 × int64 × int64).
Equations f_b {L : {fset Location}} {I : Interface} (s : both L I t_Blake2bCtx) : both L I (nseq int8 128) :=
  f_b s  :=
    bind_both s (fun x =>
      solve_lift (ret_both (fst (fst (fst (fst x))) : (nseq int8 128)))) : both L I (nseq int8 128).
Fail Next Obligation.
Equations f_h {L : {fset Location}} {I : Interface} (s : both L I t_Blake2bCtx) : both L I (nseq int64 8) :=
  f_h s  :=
    bind_both s (fun x =>
      solve_lift (ret_both (snd (fst (fst (fst x))) : (nseq int64 8)))) : both L I (nseq int64 8).
Fail Next Obligation.
Equations f_t {L : {fset Location}} {I : Interface} (s : both L I t_Blake2bCtx) : both L I (nseq int64 2) :=
  f_t s  :=
    bind_both s (fun x =>
      solve_lift (ret_both (snd (fst (fst x)) : (nseq int64 2)))) : both L I (nseq int64 2).
Fail Next Obligation.
Equations f_c {L : {fset Location}} {I : Interface} (s : both L I t_Blake2bCtx) : both L I int64 :=
  f_c s  :=
    bind_both s (fun x =>
      solve_lift (ret_both (snd (fst x) : int64))) : both L I int64.
Fail Next Obligation.
Equations f_outlen {L : {fset Location}} {I : Interface} (s : both L I t_Blake2bCtx) : both L I int64 :=
  f_outlen s  :=
    bind_both s (fun x =>
      solve_lift (ret_both (snd x : int64))) : both L I int64.
Fail Next Obligation.
Equations Build_t_Blake2bCtx {L0 : {fset Location}} {L1 : {fset Location}} {L2 : {fset Location}} {L3 : {fset Location}} {L4 : {fset Location}} {I0 : Interface} {I1 : Interface} {I2 : Interface} {I3 : Interface} {I4 : Interface} {f_b : both L0 I0 (nseq int8 128)} {f_h : both L1 I1 (nseq int64 8)} {f_t : both L2 I2 (nseq int64 2)} {f_c : both L3 I3 int64} {f_outlen : both L4 I4 int64} : both (L0:|:L1:|:L2:|:L3:|:L4) (I0:|:I1:|:I2:|:I3:|:I4) (t_Blake2bCtx) :=
  Build_t_Blake2bCtx  :=
    bind_both f_outlen (fun f_outlen =>
      bind_both f_c (fun f_c =>
        bind_both f_t (fun f_t =>
          bind_both f_h (fun f_h =>
            bind_both f_b (fun f_b =>
              solve_lift (ret_both ((f_b,f_h,f_t,f_c,f_outlen) : (t_Blake2bCtx)))))))) : both (L0:|:L1:|:L2:|:L3:|:L4) (I0:|:I1:|:I2:|:I3:|:I4) (t_Blake2bCtx).
Fail Next Obligation.
Notation "'Build_t_Blake2bCtx' '[' x ']' '(' 'f_b' ':=' y ')'" := (Build_t_Blake2bCtx (f_b := y) (f_h := f_h x) (f_t := f_t x) (f_c := f_c x) (f_outlen := f_outlen x)).
Notation "'Build_t_Blake2bCtx' '[' x ']' '(' 'f_h' ':=' y ')'" := (Build_t_Blake2bCtx (f_b := f_b x) (f_h := y) (f_t := f_t x) (f_c := f_c x) (f_outlen := f_outlen x)).
Notation "'Build_t_Blake2bCtx' '[' x ']' '(' 'f_t' ':=' y ')'" := (Build_t_Blake2bCtx (f_b := f_b x) (f_h := f_h x) (f_t := y) (f_c := f_c x) (f_outlen := f_outlen x)).
Notation "'Build_t_Blake2bCtx' '[' x ']' '(' 'f_c' ':=' y ')'" := (Build_t_Blake2bCtx (f_b := f_b x) (f_h := f_h x) (f_t := f_t x) (f_c := y) (f_outlen := f_outlen x)).
Notation "'Build_t_Blake2bCtx' '[' x ']' '(' 'f_outlen' ':=' y ')'" := (Build_t_Blake2bCtx (f_b := f_b x) (f_h := f_h x) (f_t := f_t x) (f_c := f_c x) (f_outlen := y)).

Equations impl__Blake2bCtx__update_c {L1 : {fset Location}} {L2 : {fset Location}} {I1 : Interface} {I2 : Interface} (self : both L1 I1 t_Blake2bCtx) (c : both L2 I2 int64) : both (L1 :|: L2) (I1 :|: I2) t_Blake2bCtx :=
  impl__Blake2bCtx__update_c self c  :=
    solve_lift (Build_Blake2bCtx[self] (f_b := f_b self) (f_h := f_h self) (f_t := f_t self) (f_c := c)) : both (L1 :|: L2) (I1 :|: I2) t_Blake2bCtx.
Fail Next Obligation.

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

Equations rotr64 {L1 : {fset Location}} {L2 : {fset Location}} {I1 : Interface} {I2 : Interface} (x : both L1 I1 int64) (y : both L2 I2 int64) : both (L1 :|: L2) (I1 :|: I2) int64 :=
  rotr64 x y  :=
    solve_lift ((x shift_right y) .^ (x shift_left ((ret_both (64 : int64)) .- y))) : both (L1 :|: L2) (I1 :|: I2) int64.
Fail Next Obligation.

Equations v_G {L1 : {fset Location}} {L2 : {fset Location}} {L3 : {fset Location}} {L4 : {fset Location}} {L5 : {fset Location}} {L6 : {fset Location}} {L7 : {fset Location}} {I1 : Interface} {I2 : Interface} {I3 : Interface} {I4 : Interface} {I5 : Interface} {I6 : Interface} {I7 : Interface} (v : both L1 I1 (nseq int64 16)) (a : both L2 I2 uint_size) (b : both L3 I3 uint_size) (c : both L4 I4 uint_size) (d : both L5 I5 uint_size) (x : both L6 I6 int64) (y : both L7 I7 int64) : both (L1 :|: L2 :|: L3 :|: L4 :|: L5 :|: L6 :|: L7) (I1 :|: I2 :|: I3 :|: I4 :|: I5 :|: I6 :|: I7) (int64 × int64 × int64 × int64) :=
  v_G v a b c d x y  :=
    letb '(vv_a,vv_b,vv_c,vv_d) := prod_b (v.a[a],v.a[b],v.a[c],v.a[d]) in
    letb vv_a := impl__u64__wrapping_add (impl__u64__wrapping_add vv_a vv_b) x in
    letb vv_d := rotr64 (vv_d .^ vv_a) (ret_both (32 : int64)) in
    letb vv_c := impl__u64__wrapping_add vv_c vv_d in
    letb vv_b := rotr64 (vv_b .^ vv_c) (ret_both (24 : int64)) in
    letb vv_a := impl__u64__wrapping_add (impl__u64__wrapping_add vv_a vv_b) y in
    letb vv_d := rotr64 (vv_d .^ vv_a) (ret_both (16 : int64)) in
    letb vv_c := impl__u64__wrapping_add vv_c vv_d in
    letb vv_b := rotr64 (vv_b .^ vv_c) (ret_both (63 : int64)) in
    solve_lift (prod_b (vv_a,vv_b,vv_c,vv_d)) : both (L1 :|: L2 :|: L3 :|: L4 :|: L5 :|: L6 :|: L7) (I1 :|: I2 :|: I3 :|: I4 :|: I5 :|: I6 :|: I7) (int64 × int64 × int64 × int64).
Fail Next Obligation.

Equations mix {L1 : {fset Location}} {L2 : {fset Location}} {I1 : Interface} {I2 : Interface} (v : both L1 I1 (nseq int64 16)) (m : both L2 I2 (nseq int64 16)) : both (L1 :|: L2) (I1 :|: I2) (nseq int64 16) :=
  mix v m  :=
    letb (sigma : nseq (nseq uint_size 16) 12) := array_from_list [array_from_list [ret_both (0 : uint_size);
        ret_both (1 : uint_size);
        ret_both (2 : uint_size);
        ret_both (3 : uint_size);
        ret_both (4 : uint_size);
        ret_both (5 : uint_size);
        ret_both (6 : uint_size);
        ret_both (7 : uint_size);
        ret_both (8 : uint_size);
        ret_both (9 : uint_size);
        ret_both (10 : uint_size);
        ret_both (11 : uint_size);
        ret_both (12 : uint_size);
        ret_both (13 : uint_size);
        ret_both (14 : uint_size);
        ret_both (15 : uint_size)];
      array_from_list [ret_both (14 : uint_size);
        ret_both (10 : uint_size);
        ret_both (4 : uint_size);
        ret_both (8 : uint_size);
        ret_both (9 : uint_size);
        ret_both (15 : uint_size);
        ret_both (13 : uint_size);
        ret_both (6 : uint_size);
        ret_both (1 : uint_size);
        ret_both (12 : uint_size);
        ret_both (0 : uint_size);
        ret_both (2 : uint_size);
        ret_both (11 : uint_size);
        ret_both (7 : uint_size);
        ret_both (5 : uint_size);
        ret_both (3 : uint_size)];
      array_from_list [ret_both (11 : uint_size);
        ret_both (8 : uint_size);
        ret_both (12 : uint_size);
        ret_both (0 : uint_size);
        ret_both (5 : uint_size);
        ret_both (2 : uint_size);
        ret_both (15 : uint_size);
        ret_both (13 : uint_size);
        ret_both (10 : uint_size);
        ret_both (14 : uint_size);
        ret_both (3 : uint_size);
        ret_both (6 : uint_size);
        ret_both (7 : uint_size);
        ret_both (1 : uint_size);
        ret_both (9 : uint_size);
        ret_both (4 : uint_size)];
      array_from_list [ret_both (7 : uint_size);
        ret_both (9 : uint_size);
        ret_both (3 : uint_size);
        ret_both (1 : uint_size);
        ret_both (13 : uint_size);
        ret_both (12 : uint_size);
        ret_both (11 : uint_size);
        ret_both (14 : uint_size);
        ret_both (2 : uint_size);
        ret_both (6 : uint_size);
        ret_both (5 : uint_size);
        ret_both (10 : uint_size);
        ret_both (4 : uint_size);
        ret_both (0 : uint_size);
        ret_both (15 : uint_size);
        ret_both (8 : uint_size)];
      array_from_list [ret_both (9 : uint_size);
        ret_both (0 : uint_size);
        ret_both (5 : uint_size);
        ret_both (7 : uint_size);
        ret_both (2 : uint_size);
        ret_both (4 : uint_size);
        ret_both (10 : uint_size);
        ret_both (15 : uint_size);
        ret_both (14 : uint_size);
        ret_both (1 : uint_size);
        ret_both (11 : uint_size);
        ret_both (12 : uint_size);
        ret_both (6 : uint_size);
        ret_both (8 : uint_size);
        ret_both (3 : uint_size);
        ret_both (13 : uint_size)];
      array_from_list [ret_both (2 : uint_size);
        ret_both (12 : uint_size);
        ret_both (6 : uint_size);
        ret_both (10 : uint_size);
        ret_both (0 : uint_size);
        ret_both (11 : uint_size);
        ret_both (8 : uint_size);
        ret_both (3 : uint_size);
        ret_both (4 : uint_size);
        ret_both (13 : uint_size);
        ret_both (7 : uint_size);
        ret_both (5 : uint_size);
        ret_both (15 : uint_size);
        ret_both (14 : uint_size);
        ret_both (1 : uint_size);
        ret_both (9 : uint_size)];
      array_from_list [ret_both (12 : uint_size);
        ret_both (5 : uint_size);
        ret_both (1 : uint_size);
        ret_both (15 : uint_size);
        ret_both (14 : uint_size);
        ret_both (13 : uint_size);
        ret_both (4 : uint_size);
        ret_both (10 : uint_size);
        ret_both (0 : uint_size);
        ret_both (7 : uint_size);
        ret_both (6 : uint_size);
        ret_both (3 : uint_size);
        ret_both (9 : uint_size);
        ret_both (2 : uint_size);
        ret_both (8 : uint_size);
        ret_both (11 : uint_size)];
      array_from_list [ret_both (13 : uint_size);
        ret_both (11 : uint_size);
        ret_both (7 : uint_size);
        ret_both (14 : uint_size);
        ret_both (12 : uint_size);
        ret_both (1 : uint_size);
        ret_both (3 : uint_size);
        ret_both (9 : uint_size);
        ret_both (5 : uint_size);
        ret_both (0 : uint_size);
        ret_both (15 : uint_size);
        ret_both (4 : uint_size);
        ret_both (8 : uint_size);
        ret_both (6 : uint_size);
        ret_both (2 : uint_size);
        ret_both (10 : uint_size)];
      array_from_list [ret_both (6 : uint_size);
        ret_both (15 : uint_size);
        ret_both (14 : uint_size);
        ret_both (9 : uint_size);
        ret_both (11 : uint_size);
        ret_both (3 : uint_size);
        ret_both (0 : uint_size);
        ret_both (8 : uint_size);
        ret_both (12 : uint_size);
        ret_both (2 : uint_size);
        ret_both (13 : uint_size);
        ret_both (7 : uint_size);
        ret_both (1 : uint_size);
        ret_both (4 : uint_size);
        ret_both (10 : uint_size);
        ret_both (5 : uint_size)];
      array_from_list [ret_both (10 : uint_size);
        ret_both (2 : uint_size);
        ret_both (8 : uint_size);
        ret_both (4 : uint_size);
        ret_both (7 : uint_size);
        ret_both (6 : uint_size);
        ret_both (1 : uint_size);
        ret_both (5 : uint_size);
        ret_both (15 : uint_size);
        ret_both (11 : uint_size);
        ret_both (9 : uint_size);
        ret_both (14 : uint_size);
        ret_both (3 : uint_size);
        ret_both (12 : uint_size);
        ret_both (13 : uint_size);
        ret_both (0 : uint_size)];
      array_from_list [ret_both (0 : uint_size);
        ret_both (1 : uint_size);
        ret_both (2 : uint_size);
        ret_both (3 : uint_size);
        ret_both (4 : uint_size);
        ret_both (5 : uint_size);
        ret_both (6 : uint_size);
        ret_both (7 : uint_size);
        ret_both (8 : uint_size);
        ret_both (9 : uint_size);
        ret_both (10 : uint_size);
        ret_both (11 : uint_size);
        ret_both (12 : uint_size);
        ret_both (13 : uint_size);
        ret_both (14 : uint_size);
        ret_both (15 : uint_size)];
      array_from_list [ret_both (14 : uint_size);
        ret_both (10 : uint_size);
        ret_both (4 : uint_size);
        ret_both (8 : uint_size);
        ret_both (9 : uint_size);
        ret_both (15 : uint_size);
        ret_both (13 : uint_size);
        ret_both (6 : uint_size);
        ret_both (1 : uint_size);
        ret_both (12 : uint_size);
        ret_both (0 : uint_size);
        ret_both (2 : uint_size);
        ret_both (11 : uint_size);
        ret_both (7 : uint_size);
        ret_both (5 : uint_size);
        ret_both (3 : uint_size)]] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (0 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (1 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (2 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (3 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (4 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (5 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (6 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (7 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (8 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (9 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (10 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v4,v8,v12) := v_G v (ret_both (0 : uint_size)) (ret_both (4 : uint_size)) (ret_both (8 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (0 : uint_size))])]) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (1 : uint_size))])]) in
    letb '(v1,v5,v9,v13) := v_G v (ret_both (1 : uint_size)) (ret_both (5 : uint_size)) (ret_both (9 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (2 : uint_size))])]) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (3 : uint_size))])]) in
    letb '(v2,v6,v10,v14) := v_G v (ret_both (2 : uint_size)) (ret_both (6 : uint_size)) (ret_both (10 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (4 : uint_size))])]) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (5 : uint_size))])]) in
    letb '(v3,v7,v11,v15) := v_G v (ret_both (3 : uint_size)) (ret_both (7 : uint_size)) (ret_both (11 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (6 : uint_size))])]) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (7 : uint_size))])]) in
    letb v := array_from_list [v0;
      v1;
      v2;
      v3;
      v4;
      v5;
      v6;
      v7;
      v8;
      v9;
      v10;
      v11;
      v12;
      v13;
      v14;
      v15] in
    letb '(v0,v5,v10,v15) := v_G v (ret_both (0 : uint_size)) (ret_both (5 : uint_size)) (ret_both (10 : uint_size)) (ret_both (15 : uint_size)) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (8 : uint_size))])]) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (9 : uint_size))])]) in
    letb '(v1,v6,v11,v12) := v_G v (ret_both (1 : uint_size)) (ret_both (6 : uint_size)) (ret_both (11 : uint_size)) (ret_both (12 : uint_size)) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (10 : uint_size))])]) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (11 : uint_size))])]) in
    letb '(v2,v7,v8,v13) := v_G v (ret_both (2 : uint_size)) (ret_both (7 : uint_size)) (ret_both (8 : uint_size)) (ret_both (13 : uint_size)) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (12 : uint_size))])]) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (13 : uint_size))])]) in
    letb '(v3,v4,v9,v14) := v_G v (ret_both (3 : uint_size)) (ret_both (4 : uint_size)) (ret_both (9 : uint_size)) (ret_both (14 : uint_size)) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (14 : uint_size))])]) (m.a[((sigma.a[(ret_both (11 : uint_size))]).a[(ret_both (15 : uint_size))])]) in
    array_from_list [solve_lift v0;
      solve_lift v1;
      solve_lift v2;
      solve_lift v3;
      solve_lift v4;
      solve_lift v5;
      solve_lift v6;
      solve_lift v7;
      solve_lift v8;
      solve_lift v9;
      solve_lift v10;
      solve_lift v11;
      solve_lift v12;
      solve_lift v13;
      solve_lift v14;
      solve_lift v15] : both (L1 :|: L2) (I1 :|: I2) (nseq int64 16).
Fail Next Obligation.

#[global] Program Instance t_Blake2bCtx_t_Clone : t_Clone t_Blake2bCtx :=
  let dropped_body := fun  {L1 : {fset Location}} {I1 : Interface} (_ : both L1 I1 'unit) => solve_lift (ret_both (tt : 'unit)) : both (L1 :|: fset []) I1 'unit in
  {| dropped_body_loc := (fset [] : {fset Location});
  dropped_body := (@dropped_body)|}.
Fail Next Obligation.
Hint Unfold t_Blake2bCtx_t_Clone.

#[global] Program Instance t_Blake2bCtx_t_Debug : t_Debug t_Blake2bCtx :=
  let dropped_body := fun  {L1 : {fset Location}} {I1 : Interface} (_ : both L1 I1 'unit) => solve_lift (ret_both (tt : 'unit)) : both (L1 :|: fset []) I1 'unit in
  {| dropped_body_loc := (fset [] : {fset Location});
  dropped_body := (@dropped_body)|}.
Fail Next Obligation.
Hint Unfold t_Blake2bCtx_t_Debug.

Equations blake2b_compress {L1 : {fset Location}} {L2 : {fset Location}} {I1 : Interface} {I2 : Interface} (ctx : both L1 I1 t_Blake2bCtx) (last : both L2 I2 'bool) : both (L1 :|: L2) (I1 :|: I2) t_Blake2bCtx :=
  blake2b_compress ctx last  :=
    letb v := impl__unwrap (f_try_into (f_collect (f_map (f_into_iter (Build_t_Range (f_start := ret_both (0 : uint_size)) (f_end := ret_both (16 : uint_size)))) (fun idx =>
      ifb idx <.? (ret_both (8 : uint_size))
      then (f_h ctx).a[idx]
      else ifb andb (idx >=.? (ret_both (8 : uint_size))) (idx <=.? (ret_both (11 : uint_size)))
      then v_BLAKE2B_IV.a[(idx .- (ret_both (8 : uint_size)))]
      else ifb idx =.? (ret_both (12 : uint_size))
      then (v_BLAKE2B_IV.a[(idx .- (ret_both (8 : uint_size)))]) .^ ((f_t ctx).a[(ret_both (0 : uint_size))])
      else ifb idx =.? (ret_both (13 : uint_size))
      then (v_BLAKE2B_IV.a[(idx .- (ret_both (8 : uint_size)))]) .^ ((f_t ctx).a[(ret_both (1 : uint_size))])
      else ifb andb (idx =.? (ret_both (14 : uint_size))) last
      then not (v_BLAKE2B_IV.a[(idx .- (ret_both (8 : uint_size)))])
      else v_BLAKE2B_IV.a[(idx .- (ret_both (8 : uint_size)))])))) in
    letb m := impl__unwrap (f_try_into (f_collect (f_map (f_into_iter (Build_t_Range (f_start := ret_both (0 : uint_size)) (f_end := ret_both (16 : uint_size)))) (fun idx =>
      impl__u64__from_le_bytes (impl__unwrap (f_try_into ((f_b ctx).a[(Build_t_Range (f_start := idx .* (ret_both (8 : uint_size))) (f_end := (idx .* (ret_both (8 : uint_size))) .+ (ret_both (8 : uint_size))))]))))))) in
    letb v := mix v m in
    letb h := impl__unwrap (f_try_into (f_collect (f_map (f_enumerate (impl__iter (unsize (f_h ctx)))) (fun '(idx,val) =>
      (val .^ (v.a[idx])) .^ (v.a[(idx .+ (ret_both (8 : uint_size)))]))))) in
    solve_lift (Build_t_Blake2bCtx (f_b := f_b ctx) (f_h := h) (f_t := f_t ctx) (f_c := f_c ctx) (f_outlen := f_outlen ctx)) : both (L1 :|: L2) (I1 :|: I2) t_Blake2bCtx.
Fail Next Obligation.

Equations blake2b_final {L1 : {fset Location}} {I1 : Interface} (ctx : both L1 I1 t_Blake2bCtx) : both L1 I1 (t_Vec int8 t_Global) :=
  blake2b_final ctx  :=
    letb t0 := impl__u64__wrapping_add ((f_t ctx).a[(ret_both (0 : uint_size))]) (f_c ctx) in
    letb t1 := ifb t0 <.? (f_c ctx)
    then impl__u64__wrapping_add ((f_t ctx).a[(ret_both (1 : uint_size))]) (ret_both (1 : int64))
    else (f_t ctx).a[(ret_both (1 : uint_size))] in
    letb (b : nseq int8 128) := impl__unwrap (f_try_into (f_collect (f_map (f_into_iter (Build_t_Range (f_start := ret_both (0 : int64)) (f_end := ret_both (128 : int64)))) (fun i =>
      ifb i <.? (f_c ctx)
      then (f_b ctx).a[(cast_int (WS2 := _) i)]
      else ret_both (0 : int8))))) in
    letb c := ret_both (128 : int64) in
    letb ctx := Build_t_Blake2bCtx (f_b := b) (f_h := f_h ctx) (f_t := array_from_list [t0;
      t1]) (f_c := c) (f_outlen := f_outlen ctx) in
    letb ctx := blake2b_compress ctx (ret_both (true : 'bool)) in
    solve_lift (f_collect (f_map (Build_t_Range (f_start := ret_both (0 : int64)) (f_end := f_outlen ctx)) (fun i =>
      cast_int (WS2 := _) (((f_h ctx).a[((cast_int (WS2 := _) i) shift_right (ret_both (3 : int32)))]) shift_right ((ret_both (8 : int64)) .* (i .& (ret_both (7 : int64)))))))) : both L1 I1 (t_Vec int8 t_Global).
Fail Next Obligation.

Equations blake2b_update {L1 : {fset Location}} {L2 : {fset Location}} {I1 : Interface} {I2 : Interface} (ctx : both L1 I1 t_Blake2bCtx) (input : both L2 I2 (seq int8)) : both (L1 :|: L2) (I1 :|: I2) t_Blake2bCtx :=
  blake2b_update ctx input  :=
    solve_lift (f_fold (impl__iter input) ctx (fun sum => fun byte =>
      letb sum := ifb (f_c sum) =.? (ret_both (128 : int64))
      then letb t0 := impl__u64__wrapping_add ((f_t sum).a[(ret_both (0 : uint_size))]) (f_c sum) in
      letb t1 := ifb t0 <.? (f_c sum)
      then impl__u64__wrapping_add ((f_t sum).a[(ret_both (1 : uint_size))]) (ret_both (1 : int64))
      else (f_t sum).a[(ret_both (1 : uint_size))] in
      blake2b_compress (Build_t_Blake2bCtx (f_b := f_b sum) (f_h := f_h sum) (f_t := array_from_list [t0;
        t1]) (f_c := ret_both (0 : int64)) (f_outlen := f_outlen sum)) (ret_both (false : 'bool))
      else sum in
      letb b := impl__unwrap (f_try_into (f_collect (f_map (f_enumerate (impl__iter (unsize (f_b sum)))) (fun '(i,b) =>
        ifb i =.? (cast_int (WS2 := _) (f_c sum))
        then byte
        else b)))) in
      Build_t_Blake2bCtx (f_b := b) (f_h := f_h sum) (f_t := f_t sum) (f_c := (f_c sum) .+ (ret_both (1 : int64))) (f_outlen := f_outlen sum))) : both (L1 :|: L2) (I1 :|: I2) t_Blake2bCtx.
Fail Next Obligation.

Equations blake2b_init {L1 : {fset Location}} {L2 : {fset Location}} {I1 : Interface} {I2 : Interface} (outlen : both L1 I1 int64) (key : both L2 I2 (t_Option (seq int8))) : both (L1 :|: L2) (I1 :|: I2) (t_Result t_Blake2bCtx int32) :=
  blake2b_init outlen key  :=
    solve_lift (run (letm[choice_typeMonad.result_bind_code (t_Result t_Blake2bCtx int32)] _ := ifb orb (orb (outlen =.? (ret_both (0 : int64))) (outlen >.? (ret_both (64 : int64)))) (impl__map_or key (ret_both (false : 'bool)) (fun k =>
      (impl__len k) >.? (ret_both (64 : uint_size))))
    then letm[choice_typeMonad.result_bind_code (t_Result t_Blake2bCtx int32)] hoist7 := ControlFlow_Break (Result_Err (ret_both (1 : int32))) in
    ControlFlow_Continue (never_to_any hoist7)
    else () in
    ControlFlow_Continue (letb (h : nseq int64 8) := v_BLAKE2B_IV in
    letb keylen := impl__map_or key (ret_both (0 : int64)) (fun k =>
      cast_int (WS2 := _) (impl__len k)) in
    letb h0 := (((h.a[(ret_both (0 : uint_size))]) .^ (ret_both (16842752 : int64))) .^ (keylen shift_left (ret_both (8 : int32)))) .^ outlen in
    letb h := array_from_list [h0;
      h.a[(ret_both (1 : uint_size))];
      h.a[(ret_both (2 : uint_size))];
      h.a[(ret_both (3 : uint_size))];
      h.a[(ret_both (4 : uint_size))];
      h.a[(ret_both (5 : uint_size))];
      h.a[(ret_both (6 : uint_size))];
      h.a[(ret_both (7 : uint_size))]] in
    letb b := repeat (ret_both (0 : int8)) (ret_both (128 : uint_size)) in
    letb ctx := Build_t_Blake2bCtx (f_b := b) (f_h := h) (f_t := repeat (ret_both (0 : int64)) (ret_both (2 : uint_size))) (f_c := ret_both (0 : int64)) (f_outlen := outlen) in
    matchb key with
    | Option_Some_case k =>
      letb k := ret_both ((k) : (seq int8)) in
      letb ctx := blake2b_update ctx k in
      letb c := ret_both (128 : int64) in
      Result_Ok (solve_lift (impl__Blake2bCtx__update_c ctx c))
    | _ =>
      Result_Ok (solve_lift ctx)
    end))) : both (L1 :|: L2) (I1 :|: I2) (t_Result t_Blake2bCtx int32).
Fail Next Obligation.

Equations blake2b_hax {L1 : {fset Location}} {L2 : {fset Location}} {L3 : {fset Location}} {I1 : Interface} {I2 : Interface} {I3 : Interface} (outlen : both L1 I1 uint_size) (key : both L2 I2 (t_Option (seq int8))) (input : both L3 I3 (seq int8)) : both (L1 :|: L2 :|: L3) (I1 :|: I2 :|: I3) (t_Result (t_Vec int8 t_Global) int32) :=
  blake2b_hax outlen key input  :=
    solve_lift (run (letm[choice_typeMonad.result_bind_code int32] ctx := blake2b_init (cast_int (WS2 := _) outlen) key in
    Result_Ok (letb ctx := blake2b_update ctx input in
    letb result := blake2b_final ctx in
    Result_Ok result))) : both (L1 :|: L2 :|: L3) (I1 :|: I2 :|: I3) (t_Result (t_Vec int8 t_Global) int32).
Fail Next Obligation.
